"""
Задание 2. Массив размером 2m + 1, где m – натуральное число,
заполнен случайным образом. Найдите в массиве медиану.
Медианой называется элемент ряда, делящий его на
две равные по длине части:
в одной находятся элементы,
которые не меньше медианы,
в другой – не больше медианы.

Решите задачу тремя способами:

3) с помощью встроенной функции поиска медианы

сделайте замеры на массивах длиной 10, 100, 1000 элементов

В конце сделайте аналитику какой трех из способов оказался эффективнее
"""
from random import randint
from timeit import timeit
from statistics import median

x = 10
orig_array = [randint(0, 100) for i in range(2 * x + 1)]
print(timeit("median(orig_array[:])", globals=globals(), number=100))

x = 100
orig_array = [randint(0, 100) for i in range(2 * x + 1)]
print(timeit("median(orig_array[:])", globals=globals(), number=100))

x = 1000
orig_array = [randint(0, 100) for i in range(2 * x + 1)]
print(timeit("median(orig_array[:])", globals=globals(), number=100))


"""
0.00016700000000000048
0.0012120999999999937
0.021626599999999996

Вывод: встроенная функция поиска медианы оказалась самая быстрая на всех массивах,
Гномья сортировка показала тоже не плохие рехультаты,
Результаты поиска медианы в массиве без сортировки, имеют место быть если масив небольшой.
"""